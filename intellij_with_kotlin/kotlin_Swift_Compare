Interface and protcol

similiar

in Kotlin
Interface Example {
    fun sum(n1:Int,n2:Int);
    fun div(n1:Int,n2:Int){ print("do something here}
}

class UserOp:op{
    override fun sum(n1: Int, n2: Int) {
            println("sum" + n1 + n2)
    }

    override fun div(n1: Int, n2: Int) {
        println("div:" + n1/n2)

    }


}

protocol Example{
    func sum(n1:Int,n2:Int)->Int
    func div(n1:Int,n2:Int)->Int
}
extension Example{
    func div(n1:Int,n2:Int)->Int{
       return n1 / n2
    }
}

class ViewController: UIViewController,Example {
    func sum(n1: Int, n2: Int) -> Int {
        return n1 + n2
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        let me = div(n1: 4, n2: 2)
        print(me)
  
    }

}





override in same package
Kotlin
* class can be inherited only if is marked open
* function can be override only if is marked open
* swift doesn't require open (unless your making your own package)

//example in viewController
//open class UIViewController 
//open var view: UIView! 
//open func loadView() 

open class Operation(){  //need open so subclass and inherit it
    var ProcessName:String? = null
    open fun sum(n1:Int, n2:Int):Int {
        return n1+n2
    }
    fun div(n1:Int,n2:Int):Int{
        return n1/n2
    }
}

class MultiOperations():Operation(){

    override fun sum(n1:Int, n2:Int):Int {
        return n1+n2 + 999
    }

    fun sub(n1:Int,n2:Int):Int{
        return n1-n2
    }
    fun mul(n1:Int,n2:Int):Int{
        return n1*n2
    }

}

fun main(args:Array<String>){
    var op = Operation()
    var sum = op.sum(10,15)
    println("sum:"+sum)
    var div=op.div(12,11)
    println("div:"+div)

    //second
    var op2 = MultiOperations()
    sum = op2.sum(10, 15)
    println("sum" + sum)
    div = op2.div(12,11)
    println("div:"+div)

}



//in swift


class Operation{  //need open so subclass and inherit it
    var ProcessName:String?
    func sum(n1:Int, n2:Int)->Int {
        return n1+n2
    }
    func div(n1:Int,n2:Int)->Int{
        return n1/n2
    }
}

class MultiOperation:Operation{
    
    override func sum(n1:Int, n2:Int)->Int {
        print("I am here")
            return n1+n2 + 999
     }
    
    func sub(n1:Int,n2:Int)->Int{
        return n1-n2
    }
    func mul(n1:Int,n2:Int)->Int{
        return n1*n2
    }
    
}




class ViewController: UIViewController {

    override func viewDidLoad() {
        super.viewDidLoad()
        let op = Operation()
        let mul = op.sum(n1: 2, n2: 2)
        print(mul)

        let op2 = MultiOperation()
        let mul2 = op2.sum(n1: 2, n2: 2)
        print(mul2)
    }

}

